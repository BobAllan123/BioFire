import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

public class Main {

    public static void main(String[] args) {

        HashMap<String,String> map = buildHashMap();

        // TEST 1
        String dna1 = "ATGTAA";
        String res1 = getAminoAcidSequence(map, dna1);
        String expected1 = "M";
        System.out.println(res1.equals(expected1));

        // TEST 2
        String dna2 = "GGATGCATTAA";
        String res2 = getAminoAcidSequence(map, dna2);
        String expected2 = "MH";
        System.out.println(res2.equals(expected2));

        // TEST 3
        String dna3 = "GAACAAATGCATTAATACAAAAA";
        String res3 = getAminoAcidSequence(map, dna3);
        String expected3 = "MH";
        System.out.println(res3.equals(expected3));

        // TEST 4
        String dna4 = "ATGCATGCGAAGATGTAA";
        String res4 = getAminoAcidSequence(map, dna4);
        String expected4 = "MHAKM";
        System.out.println(res4.equals(expected4));

        // TEST 5
        String dna5 = "ATGCATGCGAAGTAA";
        String res5 = getAminoAcidSequence(map, dna5);
        String expected5 = "MHAK";
        System.out.println(res5.equals(expected5));

        // TEST 6
        // YEAST TRANSLATION
        String dna6 = "ATGA CACAGCTTCA GATTTCATTA TTGCTGACAG CTACTATATC ACTACTCCAT CTAGTAGTGG CCACGCCCTA TGAGGCATAT CCTATCGGAA AACAATACCC CCCAGTGGCA AGAGTCAATG AATCGTTTAC ATTTCAAATT TCCAATGATA CCTATAAATC GTCTGTAGAC AAGACAGCTC AAATAACATA CAATTGCTTC GACTTACCGA GCTGGCTTTC GTTTGACTCT AGTTCTAGAA CGTTCTCAGG TGAACCTTCT TCTGACTTAC TATCTGATGC GAACACCACG TTGTATTTCA ATGTAATACT CGAGGGTACG GACTCTGCCG ACAGCACGTC TTTGAACAAT ACATACCAAT TTGTTGTTAC AAACCGTCCA TCCATCTCGC TATCGTCAGA TTTCAATCTA TTGGCGTTGT TAAAAAACTA TGGTTATACT AACGGCAAAA ACGCTCTGAA ACTAGATCCT AATGAAGTCT TCAACGTGAC TTTTGACCGT TCAATGTTCA CTAACGAAGA ATCCATTGTG TCGTATTACG GACGTTCTCA GTTGTATAAT GCGCCGTTAC CCAATTGGCT GTTCTTCGAT TCTGGCGAGT TGAAGTTTAC TGGGACGGCA CCGGTGATAA ACTCGGCGAT TGCTCCAGAA ACAAGCTACA GTTTTGTCAT CATCGCTACA GACATTGAAG GATTTTCTGC CGTTGAGGTA GAATTCGAAT TAGTCATCGG GGCTCACCAG TTAACTACCT CTATTCAAAA TAGTTTGATA ATCAACGTTA CTGACACAGG TAACGTTTCA TATGACTTAC CTCTAAACTA TGTTTATCTC GATGACGATC CTATTTCTTC TGATAAATTG GGTTCTATAA ACTTATTGGA TGCTCCAGAC TGGGTGGCAT TAGATAATGC TACCATTTCC GGGTCTGTCC CAGATGAATT ACTCGGTAAG AACTCCAATC CTGCCAATTT TTCTGTGTCC ATTTATGATA CTTATGGTGA TGTGATTTAT TTCAACTTCG AAGTTGTCTC CACAACGGAT TTGTTTGCCA TTAGTTCTCT TCCCAATATT AACGCTACAA GGGGTGAATG GTTCTCCTAC TATTTTTTGC CTTCTCAGTT TACAGACTAC GTGAATACAA ACGTTTCATT AGAGTTTACT AATTCAAGCC AAGACCATGA CTGGGTGAAA TTCCAATCAT CTAATTTAAC ATTAGCTGGA GAAGTGCCCA AGAATTTCGA CAAGCTTTCA TTAGGTTTGA AAGCGAACCA AGGTTCACAA TCTCAAGAGC TATATTTTAA CATCATTGGC ATGGATTCAA AGATAACTCA CTCAAACCAC AGTGCGAATG CAACGTCCAC AAGAAGTTCT CACCACTCCA CCTCAACAAG TTCTTACACA TCTTCTACTT ACACTGCAAA AATTTCTTCT ACCTCCGCTG CTGCTACTTC TTCTGCTCCA GCAGCGCTGC CAGCAGCCAA TAAAACTTCA TCTCACAATA AAAAAGCAGT AGCAATTGCG TGCGGTGTTG CTATCCCATT AGGCGTTATC CTAGTAGCTC TCATTTGCTT CCTAATATTC TGGAGACGCA GAAGGGAAAA TCCAGACGAT GAAAACTTAC CGCATGCTAT TAGTGGACCT GATTTGAATA ATCCTGCAAA TAAACCAAAT CAAGAAAACG CTACACCTTT GAACAACCCC TTTGATGATG ATGCTTCCTC GTACGATGAT ACTTCAATAG CAAGAAGATT GGCTGCTTTG AACACTTTGA AATTGGATAA CCACTCTGCC ACTGAATCTG ATATTTCCAG CGTGGATGAA AAGAGAGATT CTCTATCAGG TATGAATACA TACAATGATC AGTTCCAATC CCAAAGTAAA GAAGAATTAT TAGCAAAACC CCCAGTACAG CCTCCAGAGA GCCCGTTCTT TGACCCACAG AATAGGTCTT CTTCTGTGTA TATGGATAGT GAACCAGCAG TAAATAAATC CTGGCGATAT ACTGGCAACC TGTCACCAGT CTCTGATATT GTCAGAGACA GTTACGGATC ACAAAAAACT GTTGATACAG AAAAACTTTT CGATTTAGAA GCACCAGAGA AGGAAAAACG TACGTCAAGG GATGTCACTA TGTCTTCACT GGACCCTTGG AACAGCAATA TTAGCCCTTC TCCCGTAAGA AAATCAGTAA CACCATCACC ATATAACGTA ACGAAGCATC GTAACCGCCA CTTACAAAAT ATTCAAGACT CTCAAAGCGG TAAAAACGGA ATCACTCCCA CAACAATGTC AACTTCATCT TCTGACGATT TTGTTCCGGT TAAAGATGGT GAAAATTTTT GCTGGGTCCA TAGCATGGAA CCAGACAGAA GACCAAGTAA GAAAAGGTTA GTAGATTTTT CAAATAAGAG TAATGTCAAT GTTGGTCAAG TTAAGGACAT TCACGGACGC ATCCCAGAAA TGCTGTGATT ATACGCAACG ATATTTTGCT TAATTTTATT TTCCTGTTTT ATTTTTTATT AGTGGTTTAC AGATACCCTA TATTTTATTT AGTTTTTATA CTTAGAGACA TTTAATTTTA ATTCCATTCT TCAAATTTCA TTTTTGCACT".replace(" ", "");
        String res6 = getAminoAcidSequence(map, dna6);
        String expected6 = "MTQLQISLLLTATISLLHLVVATPYEAYPIGKQYPPVARVNESFTFQISNDTYKSSVDKTAQITYNCFDLPSWLSFDSSSRTFSGEPSSDLLSDANTTLYFNVILEGTDSADSTSLNNTYQFVVTNRPSISLSSDFNLLALLKNYGYTNGKNALKLDPNEVFNVTFDRSMFTNEESIVSYYGRSQLYNAPLPNWLFFDSGELKFTGTAPVINSAIAPETSYSFVIIATDIEGFSAVEVEFELVIGAHQLTTSIQNSLIINVTDTGNVSYDLPLNYVYLDDDPISSDKLGSINLLDAPDWVALDNATISGSVPDELLGKNSNPANFSVSIYDTYGDVIYFNFEVVSTTDLFAISSLPNINATRGEWFSYYFLPSQFTDYVNTNVSLEFTNSSQDHDWVKFQSSNLTLAGEVPKNFDKLSLGLKANQGSQSQELYFNIIGMDSKITHSNHSANATSTRSSHHSTSTSSYTSSTYTAKISSTSAAATSSAPAALPAANKTSSHNKKAVAIACGVAIPLGVILVALICFLIFWRRRRENPDDENLPHAISGPDLNNPANKPNQENATPLNNPFDDDASSYDDTSIARRLAALNTLKLDNHSATESDISSVDEKRDSLSGMNTYNDQFQSQSKEELLAKPPVQPPESPFFDPQNRSSSVYMDSEPAVNKSWRYTGNLSPVSDIVRDSYGSQKTVDTEKLFDLEAPEKEKRTSRDVTMSSLDPWNSNISPSPVRKSVTPSPYNVTKHRNRHLQNIQDSQSGKNGITPTTMSTSSSDDFVPVKDGENFCWVHSMEPDRRPSKKRLVDFSNKSNVNVGQVKDIHGRIPEML".replace(" ", "");
        System.out.println(res6.equals(expected6));

    }

    private static String getAminoAcidSequence(HashMap<String, String> map, String dna) {

        boolean started = false;
        ArrayList<Character> arrayList = new ArrayList<>();

        for (int i = 0; i < dna.length()-2; i++) {

            String triad = "" + dna.charAt(i) + dna.charAt(i+1) + dna.charAt(i+2);
            String res = map.get(triad);

            if (res != null && res.equals("START")) {  // IF START CODON

                arrayList.add('M');
                i += 2;
                started = true;

            } else if (res != null && res.equals("STOP")) {  // IF STOP CODON

                break;

            } else if (res == null && started) {  // NULL CODON

                i += 2;

            } else if (res != null && started) {  // VALID MIDDLE CODON

                arrayList.add(map.get(triad).charAt(0));
                i+=2;

            }  // else shift one nucleotide

        }

        return getStringRepresentation(arrayList);

    }

    private static HashMap<String, String> buildHashMap() {

        String line = "";
        HashMap<String,String> map = new HashMap<>();
        BufferedReader br = null;

        try {

            br = new BufferedReader(new FileReader("doc/CodonTable.csv"));

            while ((line = br.readLine()) != null) {

                String[] str = line.split(","); // reads each key/value pair from the CSV file

                // replaces an unwanted zero-with no break space on the first CSV value
                String s1 = str[0].replace("\uFEFF", "");
                String s2 = str[1];
                map.put(s1, s2);

            }

        } catch (IOException e) {

            e.printStackTrace();

        } finally {

            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }

        return map;

    }

    private static String getStringRepresentation(ArrayList<Character> list) {

        StringBuilder builder = new StringBuilder(list.size());

        for(Character ch: list) builder.append(ch);

        return builder.toString();

    }

}
